{"version":3,"sources":["node_modules/validate.js/validate.js","js/utilities/validators.js","js/utilities/appendElement.js","js/utilities/toggleElements.js","js/components/registrationForm.js","js/main.js"],"names":["validate","require","emailConstraints","from","email","emailValidator","value","validated","undefined","phoneNumberValidator","number","length","appendElement","reference","message","element","className","errorElement","document","createElement","innerText","Array","isArray","classList","add","parentNode","insertBefore","nextSibling","toggleElements","allElements","selectedElement","forEach","remove","registrationForm","activeView","isRequestSuccessfull","DOM","tabs","querySelectorAll","inputViews","mobileInput","querySelector","emailInput","currencyCheckbox","termsAndConditionsCheckbox","promotionsCheckbox","submitButton","form","formBox","formDescription","loader","requestConfigCheckbox","handleLoader","isLoaderVisible","style","display","sendDataToServer","data","req","Promise","resolve","reject","setTimeout","Error","e","then","console","log","catch","addEventListener","target","checked","tab","getAttribute","selectedInputView","isEmailValid","selectedCurrency","oldErrors","isMobileNumberValid","isTermsAccepted","isPromotionChecked","errorMessage","errorType","currency","promotion","preventDefault"],"mappings":"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","file":"main.0451f038.js","sourceRoot":"..","sourcesContent":["/*!\n * validate.js 0.13.1\n *\n * (c) 2013-2019 Nicklas Ansman, 2013 Wrapp\n * Validate.js may be freely distributed under the MIT license.\n * For all details and documentation:\n * http://validatejs.org/\n */\n\n(function(exports, module, define) {\n  \"use strict\";\n\n  // The main function that calls the validators specified by the constraints.\n  // The options are the following:\n  //   - format (string) - An option that controls how the returned value is formatted\n  //     * flat - Returns a flat array of just the error messages\n  //     * grouped - Returns the messages grouped by attribute (default)\n  //     * detailed - Returns an array of the raw validation data\n  //   - fullMessages (boolean) - If `true` (default) the attribute name is prepended to the error.\n  //\n  // Please note that the options are also passed to each validator.\n  var validate = function(attributes, constraints, options) {\n    options = v.extend({}, v.options, options);\n\n    var results = v.runValidations(attributes, constraints, options)\n      , attr\n      , validator;\n\n    if (results.some(function(r) { return v.isPromise(r.error); })) {\n      throw new Error(\"Use validate.async if you want support for promises\");\n    }\n    return validate.processValidationResults(results, options);\n  };\n\n  var v = validate;\n\n  // Copies over attributes from one or more sources to a single destination.\n  // Very much similar to underscore's extend.\n  // The first argument is the target object and the remaining arguments will be\n  // used as sources.\n  v.extend = function(obj) {\n    [].slice.call(arguments, 1).forEach(function(source) {\n      for (var attr in source) {\n        obj[attr] = source[attr];\n      }\n    });\n    return obj;\n  };\n\n  v.extend(validate, {\n    // This is the version of the library as a semver.\n    // The toString function will allow it to be coerced into a string\n    version: {\n      major: 0,\n      minor: 13,\n      patch: 1,\n      metadata: null,\n      toString: function() {\n        var version = v.format(\"%{major}.%{minor}.%{patch}\", v.version);\n        if (!v.isEmpty(v.version.metadata)) {\n          version += \"+\" + v.version.metadata;\n        }\n        return version;\n      }\n    },\n\n    // Below is the dependencies that are used in validate.js\n\n    // The constructor of the Promise implementation.\n    // If you are using Q.js, RSVP or any other A+ compatible implementation\n    // override this attribute to be the constructor of that promise.\n    // Since jQuery promises aren't A+ compatible they won't work.\n    Promise: typeof Promise !== \"undefined\" ? Promise : /* istanbul ignore next */ null,\n\n    EMPTY_STRING_REGEXP: /^\\s*$/,\n\n    // Runs the validators specified by the constraints object.\n    // Will return an array of the format:\n    //     [{attribute: \"<attribute name>\", error: \"<validation result>\"}, ...]\n    runValidations: function(attributes, constraints, options) {\n      var results = []\n        , attr\n        , validatorName\n        , value\n        , validators\n        , validator\n        , validatorOptions\n        , error;\n\n      if (v.isDomElement(attributes) || v.isJqueryElement(attributes)) {\n        attributes = v.collectFormValues(attributes);\n      }\n\n      // Loops through each constraints, finds the correct validator and run it.\n      for (attr in constraints) {\n        value = v.getDeepObjectValue(attributes, attr);\n        // This allows the constraints for an attribute to be a function.\n        // The function will be called with the value, attribute name, the complete dict of\n        // attributes as well as the options and constraints passed in.\n        // This is useful when you want to have different\n        // validations depending on the attribute value.\n        validators = v.result(constraints[attr], value, attributes, attr, options, constraints);\n\n        for (validatorName in validators) {\n          validator = v.validators[validatorName];\n\n          if (!validator) {\n            error = v.format(\"Unknown validator %{name}\", {name: validatorName});\n            throw new Error(error);\n          }\n\n          validatorOptions = validators[validatorName];\n          // This allows the options to be a function. The function will be\n          // called with the value, attribute name, the complete dict of\n          // attributes as well as the options and constraints passed in.\n          // This is useful when you want to have different\n          // validations depending on the attribute value.\n          validatorOptions = v.result(validatorOptions, value, attributes, attr, options, constraints);\n          if (!validatorOptions) {\n            continue;\n          }\n          results.push({\n            attribute: attr,\n            value: value,\n            validator: validatorName,\n            globalOptions: options,\n            attributes: attributes,\n            options: validatorOptions,\n            error: validator.call(validator,\n                value,\n                validatorOptions,\n                attr,\n                attributes,\n                options)\n          });\n        }\n      }\n\n      return results;\n    },\n\n    // Takes the output from runValidations and converts it to the correct\n    // output format.\n    processValidationResults: function(errors, options) {\n      errors = v.pruneEmptyErrors(errors, options);\n      errors = v.expandMultipleErrors(errors, options);\n      errors = v.convertErrorMessages(errors, options);\n\n      var format = options.format || \"grouped\";\n\n      if (typeof v.formatters[format] === 'function') {\n        errors = v.formatters[format](errors);\n      } else {\n        throw new Error(v.format(\"Unknown format %{format}\", options));\n      }\n\n      return v.isEmpty(errors) ? undefined : errors;\n    },\n\n    // Runs the validations with support for promises.\n    // This function will return a promise that is settled when all the\n    // validation promises have been completed.\n    // It can be called even if no validations returned a promise.\n    async: function(attributes, constraints, options) {\n      options = v.extend({}, v.async.options, options);\n\n      var WrapErrors = options.wrapErrors || function(errors) {\n        return errors;\n      };\n\n      // Removes unknown attributes\n      if (options.cleanAttributes !== false) {\n        attributes = v.cleanAttributes(attributes, constraints);\n      }\n\n      var results = v.runValidations(attributes, constraints, options);\n\n      return new v.Promise(function(resolve, reject) {\n        v.waitForResults(results).then(function() {\n          var errors = v.processValidationResults(results, options);\n          if (errors) {\n            reject(new WrapErrors(errors, options, attributes, constraints));\n          } else {\n            resolve(attributes);\n          }\n        }, function(err) {\n          reject(err);\n        });\n      });\n    },\n\n    single: function(value, constraints, options) {\n      options = v.extend({}, v.single.options, options, {\n        format: \"flat\",\n        fullMessages: false\n      });\n      return v({single: value}, {single: constraints}, options);\n    },\n\n    // Returns a promise that is resolved when all promises in the results array\n    // are settled. The promise returned from this function is always resolved,\n    // never rejected.\n    // This function modifies the input argument, it replaces the promises\n    // with the value returned from the promise.\n    waitForResults: function(results) {\n      // Create a sequence of all the results starting with a resolved promise.\n      return results.reduce(function(memo, result) {\n        // If this result isn't a promise skip it in the sequence.\n        if (!v.isPromise(result.error)) {\n          return memo;\n        }\n\n        return memo.then(function() {\n          return result.error.then(function(error) {\n            result.error = error || null;\n          });\n        });\n      }, new v.Promise(function(r) { r(); })); // A resolved promise\n    },\n\n    // If the given argument is a call: function the and: function return the value\n    // otherwise just return the value. Additional arguments will be passed as\n    // arguments to the function.\n    // Example:\n    // ```\n    // result('foo') // 'foo'\n    // result(Math.max, 1, 2) // 2\n    // ```\n    result: function(value) {\n      var args = [].slice.call(arguments, 1);\n      if (typeof value === 'function') {\n        value = value.apply(null, args);\n      }\n      return value;\n    },\n\n    // Checks if the value is a number. This function does not consider NaN a\n    // number like many other `isNumber` functions do.\n    isNumber: function(value) {\n      return typeof value === 'number' && !isNaN(value);\n    },\n\n    // Returns false if the object is not a function\n    isFunction: function(value) {\n      return typeof value === 'function';\n    },\n\n    // A simple check to verify that the value is an integer. Uses `isNumber`\n    // and a simple modulo check.\n    isInteger: function(value) {\n      return v.isNumber(value) && value % 1 === 0;\n    },\n\n    // Checks if the value is a boolean\n    isBoolean: function(value) {\n      return typeof value === 'boolean';\n    },\n\n    // Uses the `Object` function to check if the given argument is an object.\n    isObject: function(obj) {\n      return obj === Object(obj);\n    },\n\n    // Simply checks if the object is an instance of a date\n    isDate: function(obj) {\n      return obj instanceof Date;\n    },\n\n    // Returns false if the object is `null` of `undefined`\n    isDefined: function(obj) {\n      return obj !== null && obj !== undefined;\n    },\n\n    // Checks if the given argument is a promise. Anything with a `then`\n    // function is considered a promise.\n    isPromise: function(p) {\n      return !!p && v.isFunction(p.then);\n    },\n\n    isJqueryElement: function(o) {\n      return o && v.isString(o.jquery);\n    },\n\n    isDomElement: function(o) {\n      if (!o) {\n        return false;\n      }\n\n      if (!o.querySelectorAll || !o.querySelector) {\n        return false;\n      }\n\n      if (v.isObject(document) && o === document) {\n        return true;\n      }\n\n      // http://stackoverflow.com/a/384380/699304\n      /* istanbul ignore else */\n      if (typeof HTMLElement === \"object\") {\n        return o instanceof HTMLElement;\n      } else {\n        return o &&\n          typeof o === \"object\" &&\n          o !== null &&\n          o.nodeType === 1 &&\n          typeof o.nodeName === \"string\";\n      }\n    },\n\n    isEmpty: function(value) {\n      var attr;\n\n      // Null and undefined are empty\n      if (!v.isDefined(value)) {\n        return true;\n      }\n\n      // functions are non empty\n      if (v.isFunction(value)) {\n        return false;\n      }\n\n      // Whitespace only strings are empty\n      if (v.isString(value)) {\n        return v.EMPTY_STRING_REGEXP.test(value);\n      }\n\n      // For arrays we use the length property\n      if (v.isArray(value)) {\n        return value.length === 0;\n      }\n\n      // Dates have no attributes but aren't empty\n      if (v.isDate(value)) {\n        return false;\n      }\n\n      // If we find at least one property we consider it non empty\n      if (v.isObject(value)) {\n        for (attr in value) {\n          return false;\n        }\n        return true;\n      }\n\n      return false;\n    },\n\n    // Formats the specified strings with the given values like so:\n    // ```\n    // format(\"Foo: %{foo}\", {foo: \"bar\"}) // \"Foo bar\"\n    // ```\n    // If you want to write %{...} without having it replaced simply\n    // prefix it with % like this `Foo: %%{foo}` and it will be returned\n    // as `\"Foo: %{foo}\"`\n    format: v.extend(function(str, vals) {\n      if (!v.isString(str)) {\n        return str;\n      }\n      return str.replace(v.format.FORMAT_REGEXP, function(m0, m1, m2) {\n        if (m1 === '%') {\n          return \"%{\" + m2 + \"}\";\n        } else {\n          return String(vals[m2]);\n        }\n      });\n    }, {\n      // Finds %{key} style patterns in the given string\n      FORMAT_REGEXP: /(%?)%\\{([^\\}]+)\\}/g\n    }),\n\n    // \"Prettifies\" the given string.\n    // Prettifying means replacing [.\\_-] with spaces as well as splitting\n    // camel case words.\n    prettify: function(str) {\n      if (v.isNumber(str)) {\n        // If there are more than 2 decimals round it to two\n        if ((str * 100) % 1 === 0) {\n          return \"\" + str;\n        } else {\n          return parseFloat(Math.round(str * 100) / 100).toFixed(2);\n        }\n      }\n\n      if (v.isArray(str)) {\n        return str.map(function(s) { return v.prettify(s); }).join(\", \");\n      }\n\n      if (v.isObject(str)) {\n        if (!v.isDefined(str.toString)) {\n          return JSON.stringify(str);\n        }\n\n        return str.toString();\n      }\n\n      // Ensure the string is actually a string\n      str = \"\" + str;\n\n      return str\n        // Splits keys separated by periods\n        .replace(/([^\\s])\\.([^\\s])/g, '$1 $2')\n        // Removes backslashes\n        .replace(/\\\\+/g, '')\n        // Replaces - and - with space\n        .replace(/[_-]/g, ' ')\n        // Splits camel cased words\n        .replace(/([a-z])([A-Z])/g, function(m0, m1, m2) {\n          return \"\" + m1 + \" \" + m2.toLowerCase();\n        })\n        .toLowerCase();\n    },\n\n    stringifyValue: function(value, options) {\n      var prettify = options && options.prettify || v.prettify;\n      return prettify(value);\n    },\n\n    isString: function(value) {\n      return typeof value === 'string';\n    },\n\n    isArray: function(value) {\n      return {}.toString.call(value) === '[object Array]';\n    },\n\n    // Checks if the object is a hash, which is equivalent to an object that\n    // is neither an array nor a function.\n    isHash: function(value) {\n      return v.isObject(value) && !v.isArray(value) && !v.isFunction(value);\n    },\n\n    contains: function(obj, value) {\n      if (!v.isDefined(obj)) {\n        return false;\n      }\n      if (v.isArray(obj)) {\n        return obj.indexOf(value) !== -1;\n      }\n      return value in obj;\n    },\n\n    unique: function(array) {\n      if (!v.isArray(array)) {\n        return array;\n      }\n      return array.filter(function(el, index, array) {\n        return array.indexOf(el) == index;\n      });\n    },\n\n    forEachKeyInKeypath: function(object, keypath, callback) {\n      if (!v.isString(keypath)) {\n        return undefined;\n      }\n\n      var key = \"\"\n        , i\n        , escape = false;\n\n      for (i = 0; i < keypath.length; ++i) {\n        switch (keypath[i]) {\n          case '.':\n            if (escape) {\n              escape = false;\n              key += '.';\n            } else {\n              object = callback(object, key, false);\n              key = \"\";\n            }\n            break;\n\n          case '\\\\':\n            if (escape) {\n              escape = false;\n              key += '\\\\';\n            } else {\n              escape = true;\n            }\n            break;\n\n          default:\n            escape = false;\n            key += keypath[i];\n            break;\n        }\n      }\n\n      return callback(object, key, true);\n    },\n\n    getDeepObjectValue: function(obj, keypath) {\n      if (!v.isObject(obj)) {\n        return undefined;\n      }\n\n      return v.forEachKeyInKeypath(obj, keypath, function(obj, key) {\n        if (v.isObject(obj)) {\n          return obj[key];\n        }\n      });\n    },\n\n    // This returns an object with all the values of the form.\n    // It uses the input name as key and the value as value\n    // So for example this:\n    // <input type=\"text\" name=\"email\" value=\"foo@bar.com\" />\n    // would return:\n    // {email: \"foo@bar.com\"}\n    collectFormValues: function(form, options) {\n      var values = {}\n        , i\n        , j\n        , input\n        , inputs\n        , option\n        , value;\n\n      if (v.isJqueryElement(form)) {\n        form = form[0];\n      }\n\n      if (!form) {\n        return values;\n      }\n\n      options = options || {};\n\n      inputs = form.querySelectorAll(\"input[name], textarea[name]\");\n      for (i = 0; i < inputs.length; ++i) {\n        input = inputs.item(i);\n\n        if (v.isDefined(input.getAttribute(\"data-ignored\"))) {\n          continue;\n        }\n\n        var name = input.name.replace(/\\./g, \"\\\\\\\\.\");\n        value = v.sanitizeFormValue(input.value, options);\n        if (input.type === \"number\") {\n          value = value ? +value : null;\n        } else if (input.type === \"checkbox\") {\n          if (input.attributes.value) {\n            if (!input.checked) {\n              value = values[name] || null;\n            }\n          } else {\n            value = input.checked;\n          }\n        } else if (input.type === \"radio\") {\n          if (!input.checked) {\n            value = values[name] || null;\n          }\n        }\n        values[name] = value;\n      }\n\n      inputs = form.querySelectorAll(\"select[name]\");\n      for (i = 0; i < inputs.length; ++i) {\n        input = inputs.item(i);\n        if (v.isDefined(input.getAttribute(\"data-ignored\"))) {\n          continue;\n        }\n\n        if (input.multiple) {\n          value = [];\n          for (j in input.options) {\n            option = input.options[j];\n             if (option && option.selected) {\n              value.push(v.sanitizeFormValue(option.value, options));\n            }\n          }\n        } else {\n          var _val = typeof input.options[input.selectedIndex] !== 'undefined' ? input.options[input.selectedIndex].value : /* istanbul ignore next */ '';\n          value = v.sanitizeFormValue(_val, options);\n        }\n        values[input.name] = value;\n      }\n\n      return values;\n    },\n\n    sanitizeFormValue: function(value, options) {\n      if (options.trim && v.isString(value)) {\n        value = value.trim();\n      }\n\n      if (options.nullify !== false && value === \"\") {\n        return null;\n      }\n      return value;\n    },\n\n    capitalize: function(str) {\n      if (!v.isString(str)) {\n        return str;\n      }\n      return str[0].toUpperCase() + str.slice(1);\n    },\n\n    // Remove all errors who's error attribute is empty (null or undefined)\n    pruneEmptyErrors: function(errors) {\n      return errors.filter(function(error) {\n        return !v.isEmpty(error.error);\n      });\n    },\n\n    // In\n    // [{error: [\"err1\", \"err2\"], ...}]\n    // Out\n    // [{error: \"err1\", ...}, {error: \"err2\", ...}]\n    //\n    // All attributes in an error with multiple messages are duplicated\n    // when expanding the errors.\n    expandMultipleErrors: function(errors) {\n      var ret = [];\n      errors.forEach(function(error) {\n        // Removes errors without a message\n        if (v.isArray(error.error)) {\n          error.error.forEach(function(msg) {\n            ret.push(v.extend({}, error, {error: msg}));\n          });\n        } else {\n          ret.push(error);\n        }\n      });\n      return ret;\n    },\n\n    // Converts the error mesages by prepending the attribute name unless the\n    // message is prefixed by ^\n    convertErrorMessages: function(errors, options) {\n      options = options || {};\n\n      var ret = []\n        , prettify = options.prettify || v.prettify;\n      errors.forEach(function(errorInfo) {\n        var error = v.result(errorInfo.error,\n            errorInfo.value,\n            errorInfo.attribute,\n            errorInfo.options,\n            errorInfo.attributes,\n            errorInfo.globalOptions);\n\n        if (!v.isString(error)) {\n          ret.push(errorInfo);\n          return;\n        }\n\n        if (error[0] === '^') {\n          error = error.slice(1);\n        } else if (options.fullMessages !== false) {\n          error = v.capitalize(prettify(errorInfo.attribute)) + \" \" + error;\n        }\n        error = error.replace(/\\\\\\^/g, \"^\");\n        error = v.format(error, {\n          value: v.stringifyValue(errorInfo.value, options)\n        });\n        ret.push(v.extend({}, errorInfo, {error: error}));\n      });\n      return ret;\n    },\n\n    // In:\n    // [{attribute: \"<attributeName>\", ...}]\n    // Out:\n    // {\"<attributeName>\": [{attribute: \"<attributeName>\", ...}]}\n    groupErrorsByAttribute: function(errors) {\n      var ret = {};\n      errors.forEach(function(error) {\n        var list = ret[error.attribute];\n        if (list) {\n          list.push(error);\n        } else {\n          ret[error.attribute] = [error];\n        }\n      });\n      return ret;\n    },\n\n    // In:\n    // [{error: \"<message 1>\", ...}, {error: \"<message 2>\", ...}]\n    // Out:\n    // [\"<message 1>\", \"<message 2>\"]\n    flattenErrorsToArray: function(errors) {\n      return errors\n        .map(function(error) { return error.error; })\n        .filter(function(value, index, self) {\n          return self.indexOf(value) === index;\n        });\n    },\n\n    cleanAttributes: function(attributes, whitelist) {\n      function whitelistCreator(obj, key, last) {\n        if (v.isObject(obj[key])) {\n          return obj[key];\n        }\n        return (obj[key] = last ? true : {});\n      }\n\n      function buildObjectWhitelist(whitelist) {\n        var ow = {}\n          , lastObject\n          , attr;\n        for (attr in whitelist) {\n          if (!whitelist[attr]) {\n            continue;\n          }\n          v.forEachKeyInKeypath(ow, attr, whitelistCreator);\n        }\n        return ow;\n      }\n\n      function cleanRecursive(attributes, whitelist) {\n        if (!v.isObject(attributes)) {\n          return attributes;\n        }\n\n        var ret = v.extend({}, attributes)\n          , w\n          , attribute;\n\n        for (attribute in attributes) {\n          w = whitelist[attribute];\n\n          if (v.isObject(w)) {\n            ret[attribute] = cleanRecursive(ret[attribute], w);\n          } else if (!w) {\n            delete ret[attribute];\n          }\n        }\n        return ret;\n      }\n\n      if (!v.isObject(whitelist) || !v.isObject(attributes)) {\n        return {};\n      }\n\n      whitelist = buildObjectWhitelist(whitelist);\n      return cleanRecursive(attributes, whitelist);\n    },\n\n    exposeModule: function(validate, root, exports, module, define) {\n      if (exports) {\n        if (module && module.exports) {\n          exports = module.exports = validate;\n        }\n        exports.validate = validate;\n      } else {\n        root.validate = validate;\n        if (validate.isFunction(define) && define.amd) {\n          define([], function () { return validate; });\n        }\n      }\n    },\n\n    warn: function(msg) {\n      if (typeof console !== \"undefined\" && console.warn) {\n        console.warn(\"[validate.js] \" + msg);\n      }\n    },\n\n    error: function(msg) {\n      if (typeof console !== \"undefined\" && console.error) {\n        console.error(\"[validate.js] \" + msg);\n      }\n    }\n  });\n\n  validate.validators = {\n    // Presence validates that the value isn't empty\n    presence: function(value, options) {\n      options = v.extend({}, this.options, options);\n      if (options.allowEmpty !== false ? !v.isDefined(value) : v.isEmpty(value)) {\n        return options.message || this.message || \"can't be blank\";\n      }\n    },\n    length: function(value, options, attribute) {\n      // Empty values are allowed\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var is = options.is\n        , maximum = options.maximum\n        , minimum = options.minimum\n        , tokenizer = options.tokenizer || function(val) { return val; }\n        , err\n        , errors = [];\n\n      value = tokenizer(value);\n      var length = value.length;\n      if(!v.isNumber(length)) {\n        return options.message || this.notValid || \"has an incorrect length\";\n      }\n\n      // Is checks\n      if (v.isNumber(is) && length !== is) {\n        err = options.wrongLength ||\n          this.wrongLength ||\n          \"is the wrong length (should be %{count} characters)\";\n        errors.push(v.format(err, {count: is}));\n      }\n\n      if (v.isNumber(minimum) && length < minimum) {\n        err = options.tooShort ||\n          this.tooShort ||\n          \"is too short (minimum is %{count} characters)\";\n        errors.push(v.format(err, {count: minimum}));\n      }\n\n      if (v.isNumber(maximum) && length > maximum) {\n        err = options.tooLong ||\n          this.tooLong ||\n          \"is too long (maximum is %{count} characters)\";\n        errors.push(v.format(err, {count: maximum}));\n      }\n\n      if (errors.length > 0) {\n        return options.message || errors;\n      }\n    },\n    numericality: function(value, options, attribute, attributes, globalOptions) {\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var errors = []\n        , name\n        , count\n        , checks = {\n            greaterThan:          function(v, c) { return v > c; },\n            greaterThanOrEqualTo: function(v, c) { return v >= c; },\n            equalTo:              function(v, c) { return v === c; },\n            lessThan:             function(v, c) { return v < c; },\n            lessThanOrEqualTo:    function(v, c) { return v <= c; },\n            divisibleBy:          function(v, c) { return v % c === 0; }\n          }\n        , prettify = options.prettify ||\n          (globalOptions && globalOptions.prettify) ||\n          v.prettify;\n\n      // Strict will check that it is a valid looking number\n      if (v.isString(value) && options.strict) {\n        var pattern = \"^-?(0|[1-9]\\\\d*)\";\n        if (!options.onlyInteger) {\n          pattern += \"(\\\\.\\\\d+)?\";\n        }\n        pattern += \"$\";\n\n        if (!(new RegExp(pattern).test(value))) {\n          return options.message ||\n            options.notValid ||\n            this.notValid ||\n            this.message ||\n            \"must be a valid number\";\n        }\n      }\n\n      // Coerce the value to a number unless we're being strict.\n      if (options.noStrings !== true && v.isString(value) && !v.isEmpty(value)) {\n        value = +value;\n      }\n\n      // If it's not a number we shouldn't continue since it will compare it.\n      if (!v.isNumber(value)) {\n        return options.message ||\n          options.notValid ||\n          this.notValid ||\n          this.message ||\n          \"is not a number\";\n      }\n\n      // Same logic as above, sort of. Don't bother with comparisons if this\n      // doesn't pass.\n      if (options.onlyInteger && !v.isInteger(value)) {\n        return options.message ||\n          options.notInteger ||\n          this.notInteger ||\n          this.message ||\n          \"must be an integer\";\n      }\n\n      for (name in checks) {\n        count = options[name];\n        if (v.isNumber(count) && !checks[name](value, count)) {\n          // This picks the default message if specified\n          // For example the greaterThan check uses the message from\n          // this.notGreaterThan so we capitalize the name and prepend \"not\"\n          var key = \"not\" + v.capitalize(name);\n          var msg = options[key] ||\n            this[key] ||\n            this.message ||\n            \"must be %{type} %{count}\";\n\n          errors.push(v.format(msg, {\n            count: count,\n            type: prettify(name)\n          }));\n        }\n      }\n\n      if (options.odd && value % 2 !== 1) {\n        errors.push(options.notOdd ||\n            this.notOdd ||\n            this.message ||\n            \"must be odd\");\n      }\n      if (options.even && value % 2 !== 0) {\n        errors.push(options.notEven ||\n            this.notEven ||\n            this.message ||\n            \"must be even\");\n      }\n\n      if (errors.length) {\n        return options.message || errors;\n      }\n    },\n    datetime: v.extend(function(value, options) {\n      if (!v.isFunction(this.parse) || !v.isFunction(this.format)) {\n        throw new Error(\"Both the parse and format functions needs to be set to use the datetime/date validator\");\n      }\n\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var err\n        , errors = []\n        , earliest = options.earliest ? this.parse(options.earliest, options) : NaN\n        , latest = options.latest ? this.parse(options.latest, options) : NaN;\n\n      value = this.parse(value, options);\n\n      // 86400000 is the number of milliseconds in a day, this is used to remove\n      // the time from the date\n      if (isNaN(value) || options.dateOnly && value % 86400000 !== 0) {\n        err = options.notValid ||\n          options.message ||\n          this.notValid ||\n          \"must be a valid date\";\n        return v.format(err, {value: arguments[0]});\n      }\n\n      if (!isNaN(earliest) && value < earliest) {\n        err = options.tooEarly ||\n          options.message ||\n          this.tooEarly ||\n          \"must be no earlier than %{date}\";\n        err = v.format(err, {\n          value: this.format(value, options),\n          date: this.format(earliest, options)\n        });\n        errors.push(err);\n      }\n\n      if (!isNaN(latest) && value > latest) {\n        err = options.tooLate ||\n          options.message ||\n          this.tooLate ||\n          \"must be no later than %{date}\";\n        err = v.format(err, {\n          date: this.format(latest, options),\n          value: this.format(value, options)\n        });\n        errors.push(err);\n      }\n\n      if (errors.length) {\n        return v.unique(errors);\n      }\n    }, {\n      parse: null,\n      format: null\n    }),\n    date: function(value, options) {\n      options = v.extend({}, options, {dateOnly: true});\n      return v.validators.datetime.call(v.validators.datetime, value, options);\n    },\n    format: function(value, options) {\n      if (v.isString(options) || (options instanceof RegExp)) {\n        options = {pattern: options};\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var message = options.message || this.message || \"is invalid\"\n        , pattern = options.pattern\n        , match;\n\n      // Empty values are allowed\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (!v.isString(value)) {\n        return message;\n      }\n\n      if (v.isString(pattern)) {\n        pattern = new RegExp(options.pattern, options.flags);\n      }\n      match = pattern.exec(value);\n      if (!match || match[0].length != value.length) {\n        return message;\n      }\n    },\n    inclusion: function(value, options) {\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (v.isArray(options)) {\n        options = {within: options};\n      }\n      options = v.extend({}, this.options, options);\n      if (v.contains(options.within, value)) {\n        return;\n      }\n      var message = options.message ||\n        this.message ||\n        \"^%{value} is not included in the list\";\n      return v.format(message, {value: value});\n    },\n    exclusion: function(value, options) {\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (v.isArray(options)) {\n        options = {within: options};\n      }\n      options = v.extend({}, this.options, options);\n      if (!v.contains(options.within, value)) {\n        return;\n      }\n      var message = options.message || this.message || \"^%{value} is restricted\";\n      if (v.isString(options.within[value])) {\n        value = options.within[value];\n      }\n      return v.format(message, {value: value});\n    },\n    email: v.extend(function(value, options) {\n      options = v.extend({}, this.options, options);\n      var message = options.message || this.message || \"is not a valid email\";\n      // Empty values are fine\n      if (!v.isDefined(value)) {\n        return;\n      }\n      if (!v.isString(value)) {\n        return message;\n      }\n      if (!this.PATTERN.exec(value)) {\n        return message;\n      }\n    }, {\n      PATTERN: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i\n    }),\n    equality: function(value, options, attribute, attributes, globalOptions) {\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      if (v.isString(options)) {\n        options = {attribute: options};\n      }\n      options = v.extend({}, this.options, options);\n      var message = options.message ||\n        this.message ||\n        \"is not equal to %{attribute}\";\n\n      if (v.isEmpty(options.attribute) || !v.isString(options.attribute)) {\n        throw new Error(\"The attribute must be a non empty string\");\n      }\n\n      var otherValue = v.getDeepObjectValue(attributes, options.attribute)\n        , comparator = options.comparator || function(v1, v2) {\n          return v1 === v2;\n        }\n        , prettify = options.prettify ||\n          (globalOptions && globalOptions.prettify) ||\n          v.prettify;\n\n      if (!comparator(value, otherValue, options, attribute, attributes)) {\n        return v.format(message, {attribute: prettify(options.attribute)});\n      }\n    },\n    // A URL validator that is used to validate URLs with the ability to\n    // restrict schemes and some domains.\n    url: function(value, options) {\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      options = v.extend({}, this.options, options);\n\n      var message = options.message || this.message || \"is not a valid url\"\n        , schemes = options.schemes || this.schemes || ['http', 'https']\n        , allowLocal = options.allowLocal || this.allowLocal || false\n        , allowDataUrl = options.allowDataUrl || this.allowDataUrl || false;\n      if (!v.isString(value)) {\n        return message;\n      }\n\n      // https://gist.github.com/dperini/729294\n      var regex =\n        \"^\" +\n        // protocol identifier\n        \"(?:(?:\" + schemes.join(\"|\") + \")://)\" +\n        // user:pass authentication\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n        \"(?:\";\n\n      var tld = \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\";\n\n      if (allowLocal) {\n        tld += \"?\";\n      } else {\n        regex +=\n          // IP address exclusion\n          // private & local networks\n          \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\n          \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\n          \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\";\n      }\n\n      regex +=\n          // IP address dotted notation octets\n          // excludes loopback network 0.0.0.0\n          // excludes reserved space >= 224.0.0.0\n          // excludes network & broacast addresses\n          // (first & last IP address of each class)\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n        \"|\" +\n          // host name\n          \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n          // domain name\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n          tld +\n        \")\" +\n        // port number\n        \"(?::\\\\d{2,5})?\" +\n        // resource path\n        \"(?:[/?#]\\\\S*)?\" +\n      \"$\";\n\n      if (allowDataUrl) {\n        // RFC 2397\n        var mediaType = \"\\\\w+\\\\/[-+.\\\\w]+(?:;[\\\\w=]+)*\";\n        var urlchar = \"[A-Za-z0-9-_.!~\\\\*'();\\\\/?:@&=+$,%]*\";\n        var dataurl = \"data:(?:\"+mediaType+\")?(?:;base64)?,\"+urlchar;\n        regex = \"(?:\"+regex+\")|(?:^\"+dataurl+\"$)\";\n      }\n\n      var PATTERN = new RegExp(regex, 'i');\n      if (!PATTERN.exec(value)) {\n        return message;\n      }\n    },\n    type: v.extend(function(value, originalOptions, attribute, attributes, globalOptions) {\n      if (v.isString(originalOptions)) {\n        originalOptions = {type: originalOptions};\n      }\n\n      if (!v.isDefined(value)) {\n        return;\n      }\n\n      var options = v.extend({}, this.options, originalOptions);\n\n      var type = options.type;\n      if (!v.isDefined(type)) {\n        throw new Error(\"No type was specified\");\n      }\n\n      var check;\n      if (v.isFunction(type)) {\n        check = type;\n      } else {\n        check = this.types[type];\n      }\n\n      if (!v.isFunction(check)) {\n        throw new Error(\"validate.validators.type.types.\" + type + \" must be a function.\");\n      }\n\n      if (!check(value, options, attribute, attributes, globalOptions)) {\n        var message = originalOptions.message ||\n          this.messages[type] ||\n          this.message ||\n          options.message ||\n          (v.isFunction(type) ? \"must be of the correct type\" : \"must be of type %{type}\");\n\n        if (v.isFunction(message)) {\n          message = message(value, originalOptions, attribute, attributes, globalOptions);\n        }\n\n        return v.format(message, {attribute: v.prettify(attribute), type: type});\n      }\n    }, {\n      types: {\n        object: function(value) {\n          return v.isObject(value) && !v.isArray(value);\n        },\n        array: v.isArray,\n        integer: v.isInteger,\n        number: v.isNumber,\n        string: v.isString,\n        date: v.isDate,\n        boolean: v.isBoolean\n      },\n      messages: {}\n    })\n  };\n\n  validate.formatters = {\n    detailed: function(errors) {return errors;},\n    flat: v.flattenErrorsToArray,\n    grouped: function(errors) {\n      var attr;\n\n      errors = v.groupErrorsByAttribute(errors);\n      for (attr in errors) {\n        errors[attr] = v.flattenErrorsToArray(errors[attr]);\n      }\n      return errors;\n    },\n    constraint: function(errors) {\n      var attr;\n      errors = v.groupErrorsByAttribute(errors);\n      for (attr in errors) {\n        errors[attr] = errors[attr].map(function(result) {\n          return result.validator;\n        }).sort();\n      }\n      return errors;\n    }\n  };\n\n  validate.exposeModule(validate, this, exports, module, define);\n}).call(this,\n        typeof exports !== 'undefined' ? /* istanbul ignore next */ exports : null,\n        typeof module !== 'undefined' ? /* istanbul ignore next */ module : null,\n        typeof define !== 'undefined' ? /* istanbul ignore next */ define : null);\n","let validate = require(\"validate.js\");\n\nconst emailConstraints = {\n  from: {\n    email: true,\n  },\n};\n\n/**\n * Validate email address\n * @param {string} value - Entered email address\n */\nexport function emailValidator(value) {\n  let validated = validate({ from: value }, emailConstraints);\n\n  if (validated === undefined) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Check for valid length of phone number\n * @param {string} number Entered phone number\n */\nexport function phoneNumberValidator(number) {\n  if (number.length > 6 && number.length < 12) {\n    return true;\n  }\n\n  return false;\n}\n","/**\n * @param {node} reference Node that element should be attached at\n * @param {string} message Text on element\n * @param {string} element Type of element eg. SPAN, DIV\n * @param {string} className Class\n */\nlet appendElement = (reference, message, element, className) => {\n  let errorElement = document.createElement(element);\n  errorElement.innerText = message;\n  if (Array.isArray(className)) {\n    errorElement.classList.add(...className);\n  } else {\n    errorElement.classList.add(className);\n  }\n\n  reference.parentNode.insertBefore(errorElement, reference.nextSibling);\n};\n\nexport default appendElement;\n","/**\n * @param {node} allElements Group of elements\n * @param {node} selectedElement Selected element\n * @param {string} className Class that should be toggled\n */\nlet toggleElements = (allElements, selectedElement, className) => {\n  allElements.forEach((element) => {\n    element.classList.remove(className);\n  });\n\n  selectedElement.classList.add(className);\n};\n\nexport default toggleElements;\n","import { emailValidator, phoneNumberValidator } from \"../utilities/validators\";\nimport appendElement from \"../utilities/appendElement\";\nimport toggleElements from \"../utilities/toggleElements\";\n\nfunction registrationForm() {\n  let activeView = \"mobile\";\n  let isRequestSuccessfull = true;\n\n  let DOM = {\n    tabs: document.querySelectorAll(\".js-formTab\"),\n    inputViews: document.querySelectorAll(\".js-inputViews\"),\n    mobileInput: document.querySelector(\".js-mobileNumberValue\"),\n    emailInput: document.querySelector(\".js-emailValue\"),\n    currencyCheckbox: document.querySelectorAll('input[name=\"currency\"]'),\n    termsAndConditionsCheckbox: document.querySelector('input[name=\"terms\"]'),\n    promotionsCheckbox: document.querySelector('input[name=\"promotion\"]'),\n    submitButton: document.querySelector(\".js-submitForm\"),\n    form: document.querySelector(\".js-registrationForm\"),\n    formBox: document.querySelector(\".js-formBox\"),\n    formDescription: document.querySelector(\".js-formDescription\"),\n    loader: document.querySelector(\".js-loader\"),\n    requestConfigCheckbox: document.querySelector(\".js-requestConfigCheckbox\"),\n  };\n\n  let removeOldErrors = () => {\n    let oldErrors = document.querySelectorAll(\".error-message\");\n\n    if (oldErrors) {\n      oldErrors.forEach((element) => {\n        element.remove();\n      });\n    }\n  };\n\n  let handleLoader = (isLoaderVisible) => {\n    if (isLoaderVisible) {\n      DOM.loader.classList.add(\"js-loader--active\");\n      DOM.formBox.style.display = \"none\";\n    } else {\n      DOM.loader.classList.remove(\"js-loader--active\");\n    }\n  };\n\n  let sendDataToServer = (data) => {\n    handleLoader(true);\n\n    let req = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        try {\n          if (!isRequestSuccessfull) {\n            throw new Error();\n          }\n          return resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      }, 2000);\n    });\n\n    let successfullySubmitedForm = (data) => {\n      handleLoader(false);\n\n      appendElement(\n        DOM.formDescription,\n        \"Successfully registered! Account is created. Please login.\",\n        \"DIV\",\n        [\"form-msg\", \"form-msg--success\"]\n      );\n    };\n\n    let errorOnSubmitingForm = () => {\n      handleLoader(false);\n      appendElement(DOM.formDescription, \"Something went wrong!\", \"DIV\", [\n        \"form-msg\",\n        \"form-msg--error\",\n      ]);\n    };\n\n    req\n      .then((data) => {\n        console.log(\"submited data\", data);\n        successfullySubmitedForm(data);\n      })\n      .catch(() => {\n        errorOnSubmitingForm();\n      });\n  };\n\n  // Request configurator\n  DOM.requestConfigCheckbox.addEventListener(\"change\", function (e) {\n    isRequestSuccessfull = e.target.checked;\n  });\n\n  // Tabs\n  DOM.tabs.forEach((tab) => {\n    tab.addEventListener(\"click\", function (e) {\n      activeView = this.getAttribute(\"data-tab-name\");\n      let selectedInputView = document.querySelector(`.js-${activeView}View`);\n\n      toggleElements(DOM.tabs, tab, \"form__tab--active\");\n      toggleElements(\n        DOM.inputViews,\n        selectedInputView,\n        \"form__option-fieldset--active\"\n      );\n    });\n  });\n\n  // Submit form\n  DOM.submitButton.addEventListener(\"click\", function (e) {\n    let isEmailValid = emailValidator(DOM.emailInput.value);\n    let isMobileNumberValid = phoneNumberValidator(DOM.mobileInput.value);\n    let isTermsAccepted = DOM.termsAndConditionsCheckbox.checked;\n    let isPromotionChecked = DOM.promotionsCheckbox.checked;\n    let selectedCurrency;\n\n    removeOldErrors();\n\n    let errorMessage = (errorType) => {\n      switch (errorType) {\n        case \"email\":\n          appendElement(\n            DOM.emailInput,\n            \"Email is not valid\",\n            \"SPAN\",\n            \"error-message\"\n          );\n          break;\n        case \"phone\":\n          appendElement(\n            DOM.mobileInput,\n            \"Mobile number is not valid\",\n            \"SPAN\",\n            \"error-message\"\n          );\n          break;\n        case \"terms\":\n          appendElement(\n            DOM.termsAndConditionsCheckbox,\n            \"You must agree with terms and conditions\",\n            \"SPAN\",\n            \"error-message\"\n          );\n          break;\n      }\n    };\n\n    DOM.currencyCheckbox.forEach(({ checked, value }) => {\n      if (checked) {\n        selectedCurrency = value;\n      }\n    });\n\n    if (activeView === \"mobile\") {\n      if (!isMobileNumberValid) {\n        errorMessage(\"phone\");\n      }\n\n      if (!isTermsAccepted) {\n        errorMessage(\"terms\");\n      }\n\n      if (isMobileNumberValid && isTermsAccepted) {\n        let data = {\n          currency: selectedCurrency,\n          promotion: isPromotionChecked,\n          [activeView]: DOM[`${activeView}Input`].value,\n        };\n\n        sendDataToServer(data);\n        return true;\n      } else {\n        e.preventDefault();\n        return false;\n      }\n    }\n\n    if (activeView === \"email\") {\n      if (!isEmailValid) {\n        errorMessage(\"email\");\n      }\n\n      if (!isTermsAccepted) {\n        errorMessage(\"terms\");\n      }\n\n      if (isEmailValid && isTermsAccepted) {\n        let data = {\n          currency: selectedCurrency,\n          promotion: isPromotionChecked,\n          [activeView]: DOM[`${activeView}Input`].value,\n        };\n\n        sendDataToServer(data);\n        return true;\n      } else {\n        e.preventDefault();\n        return false;\n      }\n    }\n\n    e.preventDefault();\n    // return true;\n  });\n}\n\nexport default registrationForm;\n","import registrationForm from \"./components/registrationForm\";\n\n(function () {\n  registrationForm();\n})();\n"]}